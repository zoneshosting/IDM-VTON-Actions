name: IDM-VTON API Workflow

on:
  workflow_dispatch:
    inputs:
      person_image_url:
        description: 'URL to person image'
        required: true
        default: ''
      garment_image_url:
        description: 'URL to garment image'
        required: true
        default: ''
      category:
        description: 'Garment category'
        required: false
        default: 'upper_body'
        type: choice
        options:
        - upper_body
        - lower_body
        - dresses
      num_inference_steps:
        description: 'Number of inference steps'
        required: false
        default: '20'
      guidance_scale:
        description: 'Guidance scale'
        required: false
        default: '2.0'
      seed:
        description: 'Random seed'
        required: false
        default: '42'
      workflow_id:
        description: 'Workflow ID for tracking'
        required: false
        default: ''

  repository_dispatch:
    types: [virtual-tryon]

env:
  HUGGINGFACE_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}

jobs:
  virtual-tryon-api:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      result_url: ${{ steps.upload-result.outputs.result_url }}
      status: ${{ steps.process.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install requests pillow numpy
    
    - name: Create processing directories
      run: |
        mkdir -p inputs outputs temp
    
    - name: Download input images
      id: download
      run: |
        echo "Downloading input images..."
        
        # Download person image
        curl -L "${{ github.event.inputs.person_image_url || github.event.client_payload.person_image_url }}" \
          -o inputs/person.jpg --max-time 60
        
        # Download garment image  
        curl -L "${{ github.event.inputs.garment_image_url || github.event.client_payload.garment_image_url }}" \
          -o inputs/garment.jpg --max-time 60
        
        # Verify downloads
        if [ ! -f inputs/person.jpg ] || [ ! -f inputs/garment.jpg ]; then
          echo "Failed to download images"
          exit 1
        fi
        
        echo "Images downloaded successfully"
        ls -la inputs/
    
    - name: Process virtual try-on
      id: process
      run: |
        echo "Starting virtual try-on processing..."
        
        python3 << 'EOF'
        import os
        import json
        from PIL import Image, ImageDraw, ImageFont
        import numpy as np
        from datetime import datetime
        
        def create_virtual_tryon():
            # Load input images
            person_img = Image.open('inputs/person.jpg').convert('RGB')
            garment_img = Image.open('inputs/garment.jpg').convert('RGB')
            
            print(f"Person image size: {person_img.size}")
            print(f"Garment image size: {garment_img.size}")
            
            # Resize person image to standard size
            target_size = (512, 768)
            person_resized = person_img.resize(target_size, Image.Resampling.LANCZOS)
            
            # Create enhanced demo result
            result = person_resized.copy()
            
            # Add garment overlay (simplified demo)
            garment_overlay = garment_img.resize((200, 200), Image.Resampling.LANCZOS)
            
            # Position garment on person (demo positioning)
            overlay_pos = (target_size[0]//2 - 100, target_size[1]//3)
            
            # Create a simple blend effect
            mask = Image.new('L', garment_overlay.size, 128)
            result.paste(garment_overlay, overlay_pos, mask)
            
            # Add processing info overlay
            draw = ImageDraw.Draw(result)
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf", 16)
            except:
                font = ImageFont.load_default()
            
            # Add watermark
            draw.rectangle([(10, target_size[1] - 80), (target_size[0] - 10, target_size[1] - 10)], 
                          fill=(0, 0, 0, 180))
            draw.text((20, target_size[1] - 70), "IDM-VTON Demo Result", fill="white", font=font)
            draw.text((20, target_size[1] - 50), f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}", 
                     fill="white", font=font)
            draw.text((20, target_size[1] - 30), "Category: ${{ github.event.inputs.category || github.event.client_payload.category || 'upper_body' }}", 
                     fill="white", font=font)
            
            # Save result
            result.save('outputs/result.jpg', 'JPEG', quality=95)
            
            # Create metadata
            metadata = {
                "timestamp": datetime.now().isoformat(),
                "workflow_id": "${{ github.event.inputs.workflow_id || github.event.client_payload.workflow_id || github.run_id }}",
                "parameters": {
                    "category": "${{ github.event.inputs.category || github.event.client_payload.category || 'upper_body' }}",
                    "steps": "${{ github.event.inputs.num_inference_steps || github.event.client_payload.num_inference_steps || '20' }}",
                    "guidance": "${{ github.event.inputs.guidance_scale || github.event.client_payload.guidance_scale || '2.0' }}",
                    "seed": "${{ github.event.inputs.seed || github.event.client_payload.seed || '42' }}"
                },
                "status": "success",
                "processing_time": "demo_mode"
            }
            
            with open('outputs/metadata.json', 'w') as f:
                json.dump(metadata, f, indent=2)
            
            print("âœ… Virtual try-on processing completed")
            return True
        
        # Run the processing
        success = create_virtual_tryon()
        print(f"::set-output name=status::{'success' if success else 'failed'}")
        EOF
    
    - name: Create results package
      run: |
        echo "Creating results package..."
        
        # Copy input images to outputs for reference
        cp inputs/person.jpg outputs/input_person.jpg
        cp inputs/garment.jpg outputs/input_garment.jpg
        
        # Create summary
        cat > outputs/README.md << EOF
        # Virtual Try-On Results
        
        Generated on: $(date)
        Workflow ID: ${{ github.run_id }}
        
        ## Files
        - \`result.jpg\` - Generated virtual try-on result
        - \`input_person.jpg\` - Original person image
        - \`input_garment.jpg\` - Original garment image
        - \`metadata.json\` - Processing metadata
        
        ## Parameters
        - Category: ${{ github.event.inputs.category || github.event.client_payload.category || 'upper_body' }}
        - Steps: ${{ github.event.inputs.num_inference_steps || github.event.client_payload.num_inference_steps || '20' }}
        - Guidance: ${{ github.event.inputs.guidance_scale || github.event.client_payload.guidance_scale || '2.0' }}
        - Seed: ${{ github.event.inputs.seed || github.event.client_payload.seed || '42' }}
        EOF
        
        ls -la outputs/
    
    - name: Upload results
      id: upload-result
      uses: actions/upload-artifact@v4
      with:
        name: virtual-tryon-results-${{ github.run_id }}
        path: outputs/
        retention-days: 7
    
    - name: Create status file
      if: always()
      run: |
        cat > status.json << EOF
        {
          "workflow_id": "${{ github.run_id }}",
          "status": "${{ steps.process.outputs.status || 'failed' }}",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "artifacts_url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}",
          "download_url": "https://github.com/${{ github.repository }}/suites/${{ github.run_id }}/artifacts"
        }
        EOF
        
        echo "Status file created:"
        cat status.json
    
    - name: Upload status
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: workflow-status-${{ github.run_id }}
        path: status.json
        retention-days: 1
